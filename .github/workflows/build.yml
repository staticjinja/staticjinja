# This workflow will install Python dependencies, run tests and lint with a variety of Python versions and OSs
# For more information see:
# https://docs.github.com/en/free-pro-team@latest/actions/reference/specifications-for-github-hosted-runners
name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0' # weekly, to catch exterior dependencies changing

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.5, 3.6, 3.7, 3.8]
        # exclude: #If you want to do this...
        #  - os: macos-latest
        #    python-version: 3.6:
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Install tox
      run: pip install tox
    # Run tox using the version of Python in `PATH`
    - name: Run tox
      run: tox -e py --skip-missing-interpreters=false
    # Upload pytest's scratch space, which was set to .pytest/ in tox.ini
    # Useful for debugging.
    - name: Upload pytest tmpdir
      uses: actions/upload-artifact@v2
      # if: failure() # Only upload on failure or previous step.
      with:
        name: pytest-tmpdir ${{ matrix.python-version }} ${{ matrix.os }}
        path: .pytest/
  lint:
    # Only run the linter on a single python version on Ubuntu
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: '3.x' # Latest python release
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Install tox
      run: pip install tox
    - name: Run flake8 with tox
      run: tox -e flake8 --skip-missing-interpreters=false
